/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { SaaSfulfillmentAPIsversion2Context } from "./saaSfulfillmentAPIsversion2Context";

class SaaSfulfillmentAPIsversion2 extends SaaSfulfillmentAPIsversion2Context {
  /**
   * Initializes a new instance of the SaaSfulfillmentAPIsversion2 class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.SaaSfulfillmentAPIsversion2Options) {
    super(options);
  }

  /**
   * Lists all the SaaS subscriptions for a publisher.
   * @summary List subscriptions
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAllOperationsResponse>
   */
  getAllOperations(options?: Models.SaaSfulfillmentAPIsversion2GetAllOperationsOptionalParams): Promise<Models.GetAllOperationsResponse>;
  /**
   * @param callback The callback
   */
  getAllOperations(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllOperations(options: Models.SaaSfulfillmentAPIsversion2GetAllOperationsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getAllOperations(options?: Models.SaaSfulfillmentAPIsversion2GetAllOperationsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetAllOperationsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllOperationsOperationSpec,
      callback) as Promise<Models.GetAllOperationsResponse>;
  }

  /**
   * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent
   * resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is
   * redirected to a partner's website, the URL contains a token in the query parameters. The partner
   * is expected to use this token and make a request to resolve it. The response contains the unique
   * SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one
   * hour only.
   * @summary Resolve a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.ResolveResponse>
   */
  resolve(options?: Models.SaaSfulfillmentAPIsversion2ResolveOptionalParams): Promise<Models.ResolveResponse>;
  /**
   * @param callback The callback
   */
  resolve(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  resolve(options: Models.SaaSfulfillmentAPIsversion2ResolveOptionalParams, callback: msRest.ServiceCallback<any>): void;
  resolve(options?: Models.SaaSfulfillmentAPIsversion2ResolveOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ResolveResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      resolveOperationSpec,
      callback) as Promise<Models.ResolveResponse>;
  }

  /**
   * Lists all the SaaS subscriptions for a publisher.
   * @summary List subscriptions
   * @param subscriptionId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSubscriptionResponse>
   */
  getSubscription(subscriptionId: string, options?: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOptionalParams): Promise<Models.GetSubscriptionResponse>;
  /**
   * @param subscriptionId
   * @param callback The callback
   */
  getSubscription(subscriptionId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubscription(subscriptionId: string, options: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getSubscription(subscriptionId: string, options?: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      getSubscriptionOperationSpec,
      callback) as Promise<Models.GetSubscriptionResponse>;
  }

  /**
   * Use this call to update the plan, the user count (quantity), or both.
   * @summary Patch a subscription
   * @param body
   * @param subscriptionId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateSubscriptionResponse>
   */
  updateSubscription(body: any, subscriptionId: string, apiVersion: Models.ApiVersion, options?: Models.SaaSfulfillmentAPIsversion2UpdateSubscriptionOptionalParams): Promise<Models.UpdateSubscriptionResponse>;
  /**
   * @param body
   * @param subscriptionId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param callback The callback
   */
  updateSubscription(body: any, subscriptionId: string, apiVersion: Models.ApiVersion, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  /**
   * @param body
   * @param subscriptionId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSubscription(body: any, subscriptionId: string, apiVersion: Models.ApiVersion, options: Models.SaaSfulfillmentAPIsversion2UpdateSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  updateSubscription(body: any, subscriptionId: string, apiVersion: Models.ApiVersion, options?: Models.SaaSfulfillmentAPIsversion2UpdateSubscriptionOptionalParams | msRest.ServiceCallback<Models.ErrorModel>, callback?: msRest.ServiceCallback<Models.ErrorModel>): Promise<Models.UpdateSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        body,
        subscriptionId,
        apiVersion,
        options
      },
      updateSubscriptionOperationSpec,
      callback) as Promise<Models.UpdateSubscriptionResponse>;
  }

  /**
   * Unsubscribe and delete the specified subscription.
   * @summary Delete a subscription
   * @param subscriptionId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteSubscriptionResponse>
   */
  deleteSubscription(subscriptionId: string, apiVersion: Models.ApiVersion1, options?: Models.SaaSfulfillmentAPIsversion2DeleteSubscriptionOptionalParams): Promise<Models.DeleteSubscriptionResponse>;
  /**
   * @param subscriptionId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param callback The callback
   */
  deleteSubscription(subscriptionId: string, apiVersion: Models.ApiVersion1, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  /**
   * @param subscriptionId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSubscription(subscriptionId: string, apiVersion: Models.ApiVersion1, options: Models.SaaSfulfillmentAPIsversion2DeleteSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  deleteSubscription(subscriptionId: string, apiVersion: Models.ApiVersion1, options?: Models.SaaSfulfillmentAPIsversion2DeleteSubscriptionOptionalParams | msRest.ServiceCallback<Models.ErrorModel>, callback?: msRest.ServiceCallback<Models.ErrorModel>): Promise<Models.DeleteSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        subscriptionId,
        apiVersion,
        options
      },
      deleteSubscriptionOperationSpec,
      callback) as Promise<Models.DeleteSubscriptionResponse>;
  }

  /**
   * Use this call to find out if there are any private or public offers for the current publisher.
   * @summary List available plans
   * @param subscriptionId
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSubscriptionPlansResponse>
   */
  listSubscriptionPlans(subscriptionId: string, options?: Models.SaaSfulfillmentAPIsversion2ListSubscriptionPlansOptionalParams): Promise<Models.ListSubscriptionPlansResponse>;
  /**
   * @param subscriptionId
   * @param callback The callback
   */
  listSubscriptionPlans(subscriptionId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param options The optional parameters
   * @param callback The callback
   */
  listSubscriptionPlans(subscriptionId: string, options: Models.SaaSfulfillmentAPIsversion2ListSubscriptionPlansOptionalParams, callback: msRest.ServiceCallback<any>): void;
  listSubscriptionPlans(subscriptionId: string, options?: Models.SaaSfulfillmentAPIsversion2ListSubscriptionPlansOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ListSubscriptionPlansResponse> {
    return this.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      listSubscriptionPlansOperationSpec,
      callback) as Promise<Models.ListSubscriptionPlansResponse>;
  }

  /**
   * Use this call to activate a subscription.
   * @summary Activate a subscription
   * @param body
   * @param subscriptionId
   * @param [options] The optional parameters
   * @returns Promise<Models.ActivateSubscriptionResponse>
   */
  activateSubscription(body: any, subscriptionId: string, options?: Models.SaaSfulfillmentAPIsversion2ActivateSubscriptionOptionalParams): Promise<Models.ActivateSubscriptionResponse>;
  /**
   * @param body
   * @param subscriptionId
   * @param callback The callback
   */
  activateSubscription(body: any, subscriptionId: string, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  /**
   * @param body
   * @param subscriptionId
   * @param options The optional parameters
   * @param callback The callback
   */
  activateSubscription(body: any, subscriptionId: string, options: Models.SaaSfulfillmentAPIsversion2ActivateSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  activateSubscription(body: any, subscriptionId: string, options?: Models.SaaSfulfillmentAPIsversion2ActivateSubscriptionOptionalParams | msRest.ServiceCallback<Models.ErrorModel>, callback?: msRest.ServiceCallback<Models.ErrorModel>): Promise<Models.ActivateSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        body,
        subscriptionId,
        options
      },
      activateSubscriptionOperationSpec,
      callback) as Promise<Models.ActivateSubscriptionResponse>;
  }

  /**
   * Lists the outstanding operations for the current publisher.
   * @summary List outstanding operations
   * @param subscriptionId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSubscriptionOperationsResponse>
   */
  getSubscriptionOperations(subscriptionId: string, options?: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOperationsOptionalParams): Promise<Models.GetSubscriptionOperationsResponse>;
  /**
   * @param subscriptionId
   * @param callback The callback
   */
  getSubscriptionOperations(subscriptionId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubscriptionOperations(subscriptionId: string, options: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOperationsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getSubscriptionOperations(subscriptionId: string, options?: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOperationsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSubscriptionOperationsResponse> {
    return this.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      getSubscriptionOperationsOperationSpec,
      callback) as Promise<Models.GetSubscriptionOperationsResponse>;
  }

  /**
   * Enables the publisher to track the status of the specified triggered async operation (such as
   * Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
   * @summary Get operation status
   * @param subscriptionId
   * @param operationId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSubscriptionOperationResponse>
   */
  getSubscriptionOperation(subscriptionId: string, operationId: string, options?: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOperationOptionalParams): Promise<Models.GetSubscriptionOperationResponse>;
  /**
   * @param subscriptionId
   * @param operationId
   * @param callback The callback
   */
  getSubscriptionOperation(subscriptionId: string, operationId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param subscriptionId
   * @param operationId
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubscriptionOperation(subscriptionId: string, operationId: string, options: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOperationOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getSubscriptionOperation(subscriptionId: string, operationId: string, options?: Models.SaaSfulfillmentAPIsversion2GetSubscriptionOperationOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSubscriptionOperationResponse> {
    return this.sendOperationRequest(
      {
        subscriptionId,
        operationId,
        options
      },
      getSubscriptionOperationOperationSpec,
      callback) as Promise<Models.GetSubscriptionOperationResponse>;
  }

  /**
   * Update the status of an operation to indicate success or failure with the provided values.
   * @summary Update the status of an operation
   * @param body
   * @param subscriptionId
   * @param operationId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateOperationResponse>
   */
  updateOperation(body: any, subscriptionId: string, operationId: string, apiVersion: Models.ApiVersion2, options?: Models.SaaSfulfillmentAPIsversion2UpdateOperationOptionalParams): Promise<Models.UpdateOperationResponse>;
  /**
   * @param body
   * @param subscriptionId
   * @param operationId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param callback The callback
   */
  updateOperation(body: any, subscriptionId: string, operationId: string, apiVersion: Models.ApiVersion2, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  /**
   * @param body
   * @param subscriptionId
   * @param operationId
   * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
   * @param options The optional parameters
   * @param callback The callback
   */
  updateOperation(body: any, subscriptionId: string, operationId: string, apiVersion: Models.ApiVersion2, options: Models.SaaSfulfillmentAPIsversion2UpdateOperationOptionalParams, callback: msRest.ServiceCallback<Models.ErrorModel>): void;
  updateOperation(body: any, subscriptionId: string, operationId: string, apiVersion: Models.ApiVersion2, options?: Models.SaaSfulfillmentAPIsversion2UpdateOperationOptionalParams | msRest.ServiceCallback<Models.ErrorModel>, callback?: msRest.ServiceCallback<Models.ErrorModel>): Promise<Models.UpdateOperationResponse> {
    return this.sendOperationRequest(
      {
        body,
        subscriptionId,
        operationId,
        apiVersion,
        options
      },
      updateOperationOperationSpec,
      callback) as Promise<Models.UpdateOperationResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllOperationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/saas/subscriptions",
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionsResponse
    },
    403: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const resolveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/saas/subscriptions/resolve",
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid,
    Parameters.xMsMarketplaceToken
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionSummary
    },
    400: {},
    403: {},
    404: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const getSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/saas/subscriptions/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Subscription
    },
    403: {},
    404: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const updateSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/saas/subscriptions/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    202: {},
    400: {},
    403: {},
    404: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const deleteSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/saas/subscriptions/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  responses: {
    202: {},
    400: {},
    403: {},
    404: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const listSubscriptionPlansOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/saas/subscriptions/{subscriptionId}/listAvailablePlans",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PlansResponse
    },
    403: {},
    404: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const activateSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/saas/subscriptions/{subscriptionId}/activate",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {},
    400: {},
    403: {},
    404: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const getSubscriptionOperationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/saas/subscriptions/{subscriptionId}/operations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationType"
            }
          }
        }
      }
    },
    400: {},
    403: {},
    404: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const getSubscriptionOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/saas/subscriptions/{subscriptionId}/operations/{operationId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationType
    },
    400: {},
    403: {},
    404: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const updateOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/saas/subscriptions/{subscriptionId}/operations/{operationId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.operationId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsRequestid,
    Parameters.xMsCorrelationid
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {},
    400: {},
    403: {},
    404: {},
    409: {},
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

export {
  SaaSfulfillmentAPIsversion2,
  SaaSfulfillmentAPIsversion2Context,
  Models as SaaSfulfillmentAPIsversion2Models,
  Mappers as SaaSfulfillmentAPIsversion2Mappers
};
