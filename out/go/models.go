package azuremarketplacesaas

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
    "github.com/satori/go.uuid"
)

// The package's fully qualified name.
const fqdn = "out/go"

        // PlanID enumerates the values for plan id.
    type PlanID string

    const (
                // Failure ...
        Failure PlanID = "Failure"
                // Success ...
        Success PlanID = "Success"
            )
    // PossiblePlanIDValues returns an array of possible values for the PlanID const type.
    func PossiblePlanIDValues() []PlanID {
        return []PlanID{Failure,Success}
    }

        // SaasSubscriptionStatus enumerates the values for saas subscription status.
    type SaasSubscriptionStatus string

    const (
                // NotStarted ...
        NotStarted SaasSubscriptionStatus = "NotStarted"
                // PendingFulfillmentStart ...
        PendingFulfillmentStart SaasSubscriptionStatus = "PendingFulfillmentStart"
                // Subscribed ...
        Subscribed SaasSubscriptionStatus = "Subscribed"
                // Suspended ...
        Suspended SaasSubscriptionStatus = "Suspended"
                // Unsubscribed ...
        Unsubscribed SaasSubscriptionStatus = "Unsubscribed"
            )
    // PossibleSaasSubscriptionStatusValues returns an array of possible values for the SaasSubscriptionStatus const type.
    func PossibleSaasSubscriptionStatusValues() []SaasSubscriptionStatus {
        return []SaasSubscriptionStatus{NotStarted,PendingFulfillmentStart,Subscribed,Suspended,Unsubscribed}
    }

        // SandboxType enumerates the values for sandbox type.
    type SandboxType string

    const (
                // Csp ...
        Csp SandboxType = "Csp"
                // None ...
        None SandboxType = "None"
            )
    // PossibleSandboxTypeValues returns an array of possible values for the SandboxType const type.
    func PossibleSandboxTypeValues() []SandboxType {
        return []SandboxType{Csp,None}
    }

        // SessionMode enumerates the values for session mode.
    type SessionMode string

    const (
                // SessionModeDryRun ...
        SessionModeDryRun SessionMode = "DryRun"
                // SessionModeNone ...
        SessionModeNone SessionMode = "None"
            )
    // PossibleSessionModeValues returns an array of possible values for the SessionMode const type.
    func PossibleSessionModeValues() []SessionMode {
        return []SessionMode{SessionModeDryRun,SessionModeNone}
    }

            // AadIdentifier ...
            type AadIdentifier struct {
            EmailID *string `json:"emailId,omitempty"`
            ObjectID *uuid.UUID `json:"objectId,omitempty"`
            TenantID *uuid.UUID `json:"tenantId,omitempty"`
            }

            // Error ...
            type Error struct {
            autorest.Response `json:"-"`
            Error *ErrorError `json:"error,omitempty"`
            }

            // ErrorError ...
            type ErrorError struct {
            Code *string `json:"code,omitempty"`
            Message *string `json:"message,omitempty"`
            }

            // OperationType ...
            type OperationType struct {
            ID *uuid.UUID `json:"id,omitempty"`
            ActivityID *uuid.UUID `json:"activityId,omitempty"`
            SubscriptionID *uuid.UUID `json:"subscriptionId,omitempty"`
            OfferID *string `json:"offerId,omitempty"`
            PublisherID *string `json:"publisherId,omitempty"`
            PlanID *string `json:"planId,omitempty"`
            Quantity *int32 `json:"quantity,omitempty"`
            Action *string `json:"action,omitempty"`
            TimeStamp *string `json:"timeStamp,omitempty"`
            Status *string `json:"status,omitempty"`
            }

            // Plan ...
            type Plan struct {
            PlanID *string `json:"planId,omitempty"`
            DisplayName *string `json:"displayName,omitempty"`
            IsPrivate *bool `json:"isPrivate,omitempty"`
            }

            // PlanIDType ...
            type PlanIDType struct {
            PlanID *string `json:"planId,omitempty"`
            }

            // PlansResponse ...
            type PlansResponse struct {
            Subscriptions *[]Plan `json:"subscriptions,omitempty"`
            }

            // QuantityType ...
            type QuantityType struct {
            Quantity *int32 `json:"quantity,omitempty"`
            }

            // SetObject ...
            type SetObject struct {
            autorest.Response `json:"-"`
            Value interface{} `json:"value,omitempty"`
            }

            // StatusType ...
            type StatusType struct {
            // PlanID - Possible values include: 'Success', 'Failure'
            PlanID PlanID `json:"planId,omitempty"`
            }

            // Subscription ...
            type Subscription struct {
            ID *uuid.UUID `json:"id,omitempty"`
            Name *string `json:"name,omitempty"`
            PublisherID *string `json:"publisherId,omitempty"`
            OfferID *string `json:"offerId,omitempty"`
            PlanID *string `json:"planId,omitempty"`
            Quantity *int32 `json:"quantity,omitempty"`
            // SessionMode - Dry Run indicates all transactions run as Test-Mode in the commerce stack. Possible values include: 'SessionModeNone', 'SessionModeDryRun'
            SessionMode SessionMode `json:"sessionMode,omitempty"`
            // IsFreeTrial - true - the customer subscription is currently in free trial, false - the customer subscription is not currently in free trial.(optional field - default false)
            IsFreeTrial *bool `json:"isFreeTrial,omitempty"`
            // IsTest - Indicating whether the current subscription is a test asset.
            IsTest *bool `json:"isTest,omitempty"`
            // SandboxType - Possible Values are None, Csp (Csp sandbox purchase). Possible values include: 'None', 'Csp'
            SandboxType SandboxType `json:"sandboxType,omitempty"`
            // SaasSubscriptionStatus - Indicates the status of the operation. Possible values include: 'NotStarted', 'PendingFulfillmentStart', 'Subscribed', 'Suspended', 'Unsubscribed'
            SaasSubscriptionStatus SaasSubscriptionStatus `json:"saasSubscriptionStatus,omitempty"`
            Beneficiary *AadIdentifier `json:"beneficiary,omitempty"`
            Purchaser *AadIdentifier `json:"purchaser,omitempty"`
            Term *SubscriptionTerm `json:"term,omitempty"`
            AllowedCustomerOperations *[]string `json:"allowedCustomerOperations,omitempty"`
            }

            // SubscriptionsResponse ...
            type SubscriptionsResponse struct {
            Subscriptions *[]Subscription `json:"subscriptions,omitempty"`
            // NextLink - Link to get the next set of subscriptions.
            NextLink *string `json:"@nextLink,omitempty"`
            }

            // SubscriptionSummary ...
            type SubscriptionSummary struct {
            ID *uuid.UUID `json:"id,omitempty"`
            SubscriptionName *string `json:"subscriptionName,omitempty"`
            OfferID *string `json:"offerId,omitempty"`
            PlanID *string `json:"planId,omitempty"`
            Quantity *int64 `json:"quantity,omitempty"`
            }

            // SubscriptionTerm ...
            type SubscriptionTerm struct {
            StartDate *date.Date `json:"startDate,omitempty"`
            EndDate *date.Date `json:"endDate,omitempty"`
            }

