# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models


class SaaSFulfillmentConfiguration(Configuration):
    """Configuration for SaaSFulfillment
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        if not base_url:
            base_url = 'https://marketplaceapi.microsoft.com/api/saas/subscriptions'

        super(SaaSFulfillmentConfiguration, self).__init__(base_url)

        self.add_user_agent('saasfulfillment/{}'.format(VERSION))


class SaaSFulfillment(SDKClient):
    """This spec details the APIs that enable partners to sell their SaaS applications in the AppSource marketplace and the Azure Marketplace. These APIs are a requirement for transactable SaaS offers on the AppSource and Azure Marketplace.

    :ivar config: Configuration for client.
    :vartype config: SaaSFulfillmentConfiguration

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        self.config = SaaSFulfillmentConfiguration(base_url)
        super(SaaSFulfillment, self).__init__(None, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2.0.0'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def get_all_operations(
            self, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """List subscriptions.

        Lists all the SaaS subscriptions for a publisher.

        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        api_version = "2.0.0"

        # Construct URL
        url = self.get_all_operations.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 403, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SubscriptionsResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_all_operations.metadata = {'url': '/'}

    def resolve(
            self, x_ms_requestid=None, x_ms_correlationid=None, x_ms_marketplace_token=None, custom_headers=None, raw=False, **operation_config):
        """Resolve a subscription.

        The resolve endpoint enables the publisher to resolve a marketplace
        token to a persistent resource ID. The resource ID is the unique
        identifier for a SaaS subscription. When a user is redirected to a
        partner's website, the URL contains a token in the query parameters.
        The partner is expected to use this token and make a request to resolve
        it. The response contains the unique SaaS subscription ID, name, offer
        ID, and plan for the resource. This token is valid for one hour only.

        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param x_ms_marketplace_token: The token query parameter in the URL
         when the user is redirected to the SaaS partner's website from Azure
         (for example,  https://contoso.com/signup?token=..). Note, The URL
         decodes the token value from the browser before using it.
        :type x_ms_marketplace_token: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        api_version = "2.0.0"
        content_type = "application/json"

        # Construct URL
        url = self.resolve.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')
        if x_ms_marketplace_token is not None:
            header_parameters['x-ms-marketplace-token'] = self._serialize.header("x_ms_marketplace_token", x_ms_marketplace_token, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 403, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SubscriptionSummary', response)
        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    resolve.metadata = {'url': '/resolve'}

    def get_subscription(
            self, subscription_id, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """List subscriptions.

        Lists all the SaaS subscriptions for a publisher.

        :param subscription_id:
        :type subscription_id: str
        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        api_version = "2.0.0"
        content_type = "application/json"

        # Construct URL
        url = self.get_subscription.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 403, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Subscription', response)
        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_subscription.metadata = {'url': '/{subscriptionId}'}

    def update_subscription(
            self, body, subscription_id, api_version, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """Patch a subscription.

        Use this call to update the plan, the user count (quantity), or both.

        :param body:
        :type body: object
        :param subscription_id:
        :type subscription_id: str
        :param api_version: Version of the API. Possible values include:
         '2018-08-31', '2018-09-15'
        :type api_version: str
        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Error or ClientRawResponse if raw=true
        :rtype: ~azuremarketplace.saas.models.Error or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        content_type = "application/json"

        # Construct URL
        url = self.update_subscription.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['ApiVersion'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'object')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202, 400, 403, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    update_subscription.metadata = {'url': '/{subscriptionId}'}

    def delete_subscription(
            self, subscription_id, api_version, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """Delete a subscription.

        Unsubscribe and delete the specified subscription.

        :param subscription_id:
        :type subscription_id: str
        :param api_version: Version of the API. Possible values include:
         '2018-08-31', '2018-09-15'
        :type api_version: str
        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Error or ClientRawResponse if raw=true
        :rtype: ~azuremarketplace.saas.models.Error or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        content_type = "application/json"

        # Construct URL
        url = self.delete_subscription.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['ApiVersion'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202, 400, 403, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    delete_subscription.metadata = {'url': '/{subscriptionId}'}

    def list_subscription_plans(
            self, subscription_id, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """List available plans.

        Use this call to find out if there are any private or public offers for
        the current publisher.

        :param subscription_id:
        :type subscription_id: str
        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        api_version = "2.0.0"
        content_type = "application/json"

        # Construct URL
        url = self.list_subscription_plans.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 403, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('PlansResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_subscription_plans.metadata = {'url': '/{subscriptionId}/listAvailablePlans'}

    def activate_subscription(
            self, body, subscription_id, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """Activate a subscription.

        Use this call to activate a subscription.

        :param body:
        :type body: object
        :param subscription_id:
        :type subscription_id: str
        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Error or ClientRawResponse if raw=true
        :rtype: ~azuremarketplace.saas.models.Error or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        api_version = "2.0.0"
        content_type = "application/json"

        # Construct URL
        url = self.activate_subscription.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'object')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 403, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    activate_subscription.metadata = {'url': '/{subscriptionId}/activate'}

    def get_subscription_operations(
            self, subscription_id, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """List outstanding operations.

        Lists the outstanding operations for the current publisher.

        :param subscription_id:
        :type subscription_id: str
        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        api_version = "2.0.0"
        content_type = "application/json"

        # Construct URL
        url = self.get_subscription_operations.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 403, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[OperationType]', response)
        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_subscription_operations.metadata = {'url': '/{subscriptionId}/operations'}

    def get_subscription_operation(
            self, subscription_id, operation_id, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """Get operation status.

        Enables the publisher to track the status of the specified triggered
        async operation (such as Subscribe, Unsubscribe, ChangePlan, or
        ChangeQuantity).

        :param subscription_id:
        :type subscription_id: str
        :param operation_id:
        :type operation_id: str
        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        api_version = "2.0.0"
        content_type = "application/json"

        # Construct URL
        url = self.get_subscription_operation.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'operationId': self._serialize.url("operation_id", operation_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 403, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('OperationType', response)
        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_subscription_operation.metadata = {'url': '/{subscriptionId}/operations/{operationId}'}

    def update_operation(
            self, body, subscription_id, operation_id, api_version, x_ms_requestid=None, x_ms_correlationid=None, custom_headers=None, raw=False, **operation_config):
        """Update the status of an operation.

        Update the status of an operation to indicate success or failure with
        the provided values.

        :param body:
        :type body: object
        :param subscription_id:
        :type subscription_id: str
        :param operation_id:
        :type operation_id: str
        :param api_version: Version of the API. Possible values include:
         '2018-08-31', '2018-09-15'
        :type api_version: str
        :param x_ms_requestid: A unique string value for tracking the request
         from the client, preferably a GUID. If this value isn't provided, one
         will be generated and provided in the response headers.
        :type x_ms_requestid: str
        :param x_ms_correlationid: A unique string value for operation on the
         client. This parameter correlates all events from client operation
         with events on the server side. If this value isn't provided, one will
         be generated and provided in the response headers.
        :type x_ms_correlationid: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Error or ClientRawResponse if raw=true
        :rtype: ~azuremarketplace.saas.models.Error or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        content_type = "application/json"

        # Construct URL
        url = self.update_operation.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'operationId': self._serialize.url("operation_id", operation_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['ApiVersion'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        if x_ms_requestid is not None:
            header_parameters['x-ms-requestid'] = self._serialize.header("x_ms_requestid", x_ms_requestid, 'str')
        if x_ms_correlationid is not None:
            header_parameters['x-ms-correlationid'] = self._serialize.header("x_ms_correlationid", x_ms_correlationid, 'str')

        # Construct body
        body_content = self._serialize.body(body, 'object')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 403, 404, 409, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 500:
            deserialized = self._deserialize('Error', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    update_operation.metadata = {'url': '/{subscriptionId}/operations/{operationId}'}
