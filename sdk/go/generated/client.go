// Package azuremarketplacesaas implements the Azure ARM Azuremarketplacesaas service API version 2.0.0.
//
// This spec details the APIs that enable partners to sell their SaaS applications in the AppSource marketplace and the
// Azure Marketplace. These APIs are a requirement for transactable SaaS offers on the AppSource and Azure Marketplace.
package azuremarketplacesaas

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "github.com/Azure/go-autorest/tracing"
    "github.com/satori/go.uuid"
    "net/http"
)

const (
// DefaultBaseURI is the default URI used for the service Azuremarketplacesaas
DefaultBaseURI = "https://marketplaceapi.microsoft.com/api/saas/subscriptions")

// BaseClient is the base client for Azuremarketplacesaas.
type BaseClient struct {
    autorest.Client
    BaseURI string
}

// New creates an instance of the BaseClient client.
func New()BaseClient {
    return NewWithBaseURI(DefaultBaseURI, )
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string, ) BaseClient {
    return BaseClient{
        Client: autorest.NewClientWithUserAgent(UserAgent()),
        BaseURI: baseURI,
    }
}

    // ActivateSubscription use this call to activate a subscription.
        // Parameters:
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) ActivateSubscription(ctx context.Context, body interface{}, subscriptionID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result Error, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.ActivateSubscription")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.ActivateSubscriptionPreparer(ctx, body, subscriptionID, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "ActivateSubscription", nil , "Failure preparing request")
        return
        }

                resp, err := client.ActivateSubscriptionSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "ActivateSubscription", resp, "Failure sending request")
                return
                }

                result, err = client.ActivateSubscriptionResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "ActivateSubscription", resp, "Failure responding to request")
                }

        return
        }

        // ActivateSubscriptionPreparer prepares the ActivateSubscription request.
        func (client BaseClient) ActivateSubscriptionPreparer(ctx context.Context, body interface{}, subscriptionID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "subscriptionId": autorest.Encode("path",subscriptionID),
                }

                            const APIVersion = "2.0.0"
            queryParameters := map[string]interface{} {
            "api-version": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/{subscriptionId}/activate",pathParameters),
        autorest.WithJSON(body),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // ActivateSubscriptionSender sends the ActivateSubscription request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) ActivateSubscriptionSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ActivateSubscriptionResponder handles the response to the ActivateSubscription request. The method always
    // closes the http.Response Body.
    func (client BaseClient) ActivateSubscriptionResponder(resp *http.Response) (result Error, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusForbidden,http.StatusNotFound,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // DeleteSubscription unsubscribe and delete the specified subscription.
        // Parameters:
            // APIVersion - version of the API.
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) DeleteSubscription(ctx context.Context, subscriptionID uuid.UUID, APIVersion string, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result Error, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.DeleteSubscription")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.DeleteSubscriptionPreparer(ctx, subscriptionID, APIVersion, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "DeleteSubscription", nil , "Failure preparing request")
        return
        }

                resp, err := client.DeleteSubscriptionSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "DeleteSubscription", resp, "Failure sending request")
                return
                }

                result, err = client.DeleteSubscriptionResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "DeleteSubscription", resp, "Failure responding to request")
                }

        return
        }

        // DeleteSubscriptionPreparer prepares the DeleteSubscription request.
        func (client BaseClient) DeleteSubscriptionPreparer(ctx context.Context, subscriptionID uuid.UUID, APIVersion string, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "subscriptionId": autorest.Encode("path",subscriptionID),
                }

                        queryParameters := map[string]interface{} {
            "ApiVersion": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsDelete(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/{subscriptionId}",pathParameters),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // DeleteSubscriptionSender sends the DeleteSubscription request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) DeleteSubscriptionSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteSubscriptionResponder handles the response to the DeleteSubscription request. The method always
    // closes the http.Response Body.
    func (client BaseClient) DeleteSubscriptionResponder(resp *http.Response) (result Error, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted,http.StatusBadRequest,http.StatusForbidden,http.StatusNotFound,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // GetAllOperations lists all the SaaS subscriptions for a publisher.
        // Parameters:
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) GetAllOperations(ctx context.Context, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result SetObject, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.GetAllOperations")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.GetAllOperationsPreparer(ctx, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetAllOperations", nil , "Failure preparing request")
        return
        }

                resp, err := client.GetAllOperationsSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetAllOperations", resp, "Failure sending request")
                return
                }

                result, err = client.GetAllOperationsResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetAllOperations", resp, "Failure responding to request")
                }

        return
        }

        // GetAllOperationsPreparer prepares the GetAllOperations request.
        func (client BaseClient) GetAllOperationsPreparer(ctx context.Context, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                        const APIVersion = "2.0.0"
            queryParameters := map[string]interface{} {
            "api-version": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/"),
        autorest.WithQueryParameters(queryParameters))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetAllOperationsSender sends the GetAllOperations request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetAllOperationsSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetAllOperationsResponder handles the response to the GetAllOperations request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetAllOperationsResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusForbidden,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result.Value),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // GetSubscription lists all the SaaS subscriptions for a publisher.
        // Parameters:
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) GetSubscription(ctx context.Context, subscriptionID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result SetObject, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.GetSubscription")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.GetSubscriptionPreparer(ctx, subscriptionID, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscription", nil , "Failure preparing request")
        return
        }

                resp, err := client.GetSubscriptionSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscription", resp, "Failure sending request")
                return
                }

                result, err = client.GetSubscriptionResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscription", resp, "Failure responding to request")
                }

        return
        }

        // GetSubscriptionPreparer prepares the GetSubscription request.
        func (client BaseClient) GetSubscriptionPreparer(ctx context.Context, subscriptionID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "subscriptionId": autorest.Encode("path",subscriptionID),
                }

                            const APIVersion = "2.0.0"
            queryParameters := map[string]interface{} {
            "api-version": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/{subscriptionId}",pathParameters),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSubscriptionSender sends the GetSubscription request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSubscriptionSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetSubscriptionResponder handles the response to the GetSubscription request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetSubscriptionResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusForbidden,http.StatusNotFound,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result.Value),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // GetSubscriptionOperation enables the publisher to track the status of the specified triggered async operation (such
    // as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
        // Parameters:
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) GetSubscriptionOperation(ctx context.Context, subscriptionID uuid.UUID, operationID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result SetObject, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.GetSubscriptionOperation")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.GetSubscriptionOperationPreparer(ctx, subscriptionID, operationID, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscriptionOperation", nil , "Failure preparing request")
        return
        }

                resp, err := client.GetSubscriptionOperationSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscriptionOperation", resp, "Failure sending request")
                return
                }

                result, err = client.GetSubscriptionOperationResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscriptionOperation", resp, "Failure responding to request")
                }

        return
        }

        // GetSubscriptionOperationPreparer prepares the GetSubscriptionOperation request.
        func (client BaseClient) GetSubscriptionOperationPreparer(ctx context.Context, subscriptionID uuid.UUID, operationID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "operationId": autorest.Encode("path",operationID),
                "subscriptionId": autorest.Encode("path",subscriptionID),
                }

                            const APIVersion = "2.0.0"
            queryParameters := map[string]interface{} {
            "api-version": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/{subscriptionId}/operations/{operationId}",pathParameters),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSubscriptionOperationSender sends the GetSubscriptionOperation request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSubscriptionOperationSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetSubscriptionOperationResponder handles the response to the GetSubscriptionOperation request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetSubscriptionOperationResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusForbidden,http.StatusNotFound,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result.Value),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // GetSubscriptionOperations lists the outstanding operations for the current publisher.
        // Parameters:
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) GetSubscriptionOperations(ctx context.Context, subscriptionID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result SetObject, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.GetSubscriptionOperations")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.GetSubscriptionOperationsPreparer(ctx, subscriptionID, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscriptionOperations", nil , "Failure preparing request")
        return
        }

                resp, err := client.GetSubscriptionOperationsSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscriptionOperations", resp, "Failure sending request")
                return
                }

                result, err = client.GetSubscriptionOperationsResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "GetSubscriptionOperations", resp, "Failure responding to request")
                }

        return
        }

        // GetSubscriptionOperationsPreparer prepares the GetSubscriptionOperations request.
        func (client BaseClient) GetSubscriptionOperationsPreparer(ctx context.Context, subscriptionID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "subscriptionId": autorest.Encode("path",subscriptionID),
                }

                            const APIVersion = "2.0.0"
            queryParameters := map[string]interface{} {
            "api-version": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/{subscriptionId}/operations",pathParameters),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSubscriptionOperationsSender sends the GetSubscriptionOperations request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSubscriptionOperationsSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetSubscriptionOperationsResponder handles the response to the GetSubscriptionOperations request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetSubscriptionOperationsResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusForbidden,http.StatusNotFound,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result.Value),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // ListSubscriptionPlans use this call to find out if there are any private or public offers for the current publisher.
        // Parameters:
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) ListSubscriptionPlans(ctx context.Context, subscriptionID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result SetObject, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.ListSubscriptionPlans")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.ListSubscriptionPlansPreparer(ctx, subscriptionID, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "ListSubscriptionPlans", nil , "Failure preparing request")
        return
        }

                resp, err := client.ListSubscriptionPlansSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "ListSubscriptionPlans", resp, "Failure sending request")
                return
                }

                result, err = client.ListSubscriptionPlansResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "ListSubscriptionPlans", resp, "Failure responding to request")
                }

        return
        }

        // ListSubscriptionPlansPreparer prepares the ListSubscriptionPlans request.
        func (client BaseClient) ListSubscriptionPlansPreparer(ctx context.Context, subscriptionID uuid.UUID, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "subscriptionId": autorest.Encode("path",subscriptionID),
                }

                            const APIVersion = "2.0.0"
            queryParameters := map[string]interface{} {
            "api-version": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/{subscriptionId}/listAvailablePlans",pathParameters),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // ListSubscriptionPlansSender sends the ListSubscriptionPlans request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) ListSubscriptionPlansSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListSubscriptionPlansResponder handles the response to the ListSubscriptionPlans request. The method always
    // closes the http.Response Body.
    func (client BaseClient) ListSubscriptionPlansResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusForbidden,http.StatusNotFound,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result.Value),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // Resolve the resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The
    // resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the
    // URL contains a token in the query parameters. The partner is expected to use this token and make a request to
    // resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This
    // token is valid for one hour only.
        // Parameters:
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
            // xMsMarketplaceToken - the token query parameter in the URL when the user is redirected to the SaaS partner's
            // website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token
            // value from the browser before using it.
    func (client BaseClient) Resolve(ctx context.Context, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID, xMsMarketplaceToken string) (result SetObject, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.Resolve")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.ResolvePreparer(ctx, xMsRequestid, xMsCorrelationid, xMsMarketplaceToken)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "Resolve", nil , "Failure preparing request")
        return
        }

                resp, err := client.ResolveSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "Resolve", resp, "Failure sending request")
                return
                }

                result, err = client.ResolveResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "Resolve", resp, "Failure responding to request")
                }

        return
        }

        // ResolvePreparer prepares the Resolve request.
        func (client BaseClient) ResolvePreparer(ctx context.Context, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID, xMsMarketplaceToken string) (*http.Request, error) {
                        const APIVersion = "2.0.0"
            queryParameters := map[string]interface{} {
            "api-version": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/resolve"),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
                if len(xMsMarketplaceToken) > 0 {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-marketplace-token",autorest.String(xMsMarketplaceToken)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // ResolveSender sends the Resolve request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) ResolveSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ResolveResponder handles the response to the Resolve request. The method always
    // closes the http.Response Body.
    func (client BaseClient) ResolveResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusForbidden,http.StatusNotFound,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result.Value),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // UpdateOperation update the status of an operation to indicate success or failure with the provided values.
        // Parameters:
            // APIVersion - version of the API.
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) UpdateOperation(ctx context.Context, body interface{}, subscriptionID uuid.UUID, operationID uuid.UUID, APIVersion string, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result Error, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.UpdateOperation")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.UpdateOperationPreparer(ctx, body, subscriptionID, operationID, APIVersion, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "UpdateOperation", nil , "Failure preparing request")
        return
        }

                resp, err := client.UpdateOperationSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "UpdateOperation", resp, "Failure sending request")
                return
                }

                result, err = client.UpdateOperationResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "UpdateOperation", resp, "Failure responding to request")
                }

        return
        }

        // UpdateOperationPreparer prepares the UpdateOperation request.
        func (client BaseClient) UpdateOperationPreparer(ctx context.Context, body interface{}, subscriptionID uuid.UUID, operationID uuid.UUID, APIVersion string, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "operationId": autorest.Encode("path",operationID),
                "subscriptionId": autorest.Encode("path",subscriptionID),
                }

                        queryParameters := map[string]interface{} {
            "ApiVersion": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPatch(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/{subscriptionId}/operations/{operationId}",pathParameters),
        autorest.WithJSON(body),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UpdateOperationSender sends the UpdateOperation request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UpdateOperationSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // UpdateOperationResponder handles the response to the UpdateOperation request. The method always
    // closes the http.Response Body.
    func (client BaseClient) UpdateOperationResponder(resp *http.Response) (result Error, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusForbidden,http.StatusNotFound,http.StatusConflict,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // UpdateSubscription use this call to update the plan, the user count (quantity), or both.
        // Parameters:
            // APIVersion - version of the API.
            // xMsRequestid - a unique string value for tracking the request from the client, preferably a GUID. If this
            // value isn't provided, one will be generated and provided in the response headers.
            // xMsCorrelationid - a unique string value for operation on the client. This parameter correlates all events
            // from client operation with events on the server side. If this value isn't provided, one will be generated
            // and provided in the response headers.
    func (client BaseClient) UpdateSubscription(ctx context.Context, body interface{}, subscriptionID uuid.UUID, APIVersion string, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (result Error, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.UpdateSubscription")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.UpdateSubscriptionPreparer(ctx, body, subscriptionID, APIVersion, xMsRequestid, xMsCorrelationid)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "UpdateSubscription", nil , "Failure preparing request")
        return
        }

                resp, err := client.UpdateSubscriptionSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "UpdateSubscription", resp, "Failure sending request")
                return
                }

                result, err = client.UpdateSubscriptionResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azuremarketplacesaas.BaseClient", "UpdateSubscription", resp, "Failure responding to request")
                }

        return
        }

        // UpdateSubscriptionPreparer prepares the UpdateSubscription request.
        func (client BaseClient) UpdateSubscriptionPreparer(ctx context.Context, body interface{}, subscriptionID uuid.UUID, APIVersion string, xMsRequestid *uuid.UUID, xMsCorrelationid *uuid.UUID) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "subscriptionId": autorest.Encode("path",subscriptionID),
                }

                        queryParameters := map[string]interface{} {
            "ApiVersion": APIVersion,
            }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPatch(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/{subscriptionId}",pathParameters),
        autorest.WithJSON(body),
        autorest.WithQueryParameters(queryParameters),
        autorest.WithHeader("Content-Type", "application/json"))
                if xMsRequestid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-requestid",autorest.String(xMsRequestid)))
                }
                if xMsCorrelationid != nil {
                preparer = autorest.DecoratePreparer(preparer,
                autorest.WithHeader("x-ms-correlationid",autorest.String(xMsCorrelationid)))
                }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UpdateSubscriptionSender sends the UpdateSubscription request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UpdateSubscriptionSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // UpdateSubscriptionResponder handles the response to the UpdateSubscription request. The method always
    // closes the http.Response Body.
    func (client BaseClient) UpdateSubscriptionResponder(resp *http.Response) (result Error, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted,http.StatusBadRequest,http.StatusForbidden,http.StatusNotFound,http.StatusInternalServerError),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

