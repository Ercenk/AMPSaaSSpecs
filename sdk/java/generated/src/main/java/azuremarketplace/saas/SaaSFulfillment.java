/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package azuremarketplace.saas;

import azuremarketplace.saas.models.Error;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for SaaSFulfillment class.
 */
public interface SaaSFulfillment {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https://marketplaceapi.microsoft.com/api/saas/subscriptions";

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllOperations();

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllOperationsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllOperationsAsync();

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getAllOperationsWithServiceResponseAsync();
    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllOperations(UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllOperationsAsync(UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Object> serviceCallback);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllOperationsAsync(UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getAllOperationsWithServiceResponseAsync(UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object resolve();

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> resolveAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> resolveAsync();

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> resolveWithServiceResponseAsync();
    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object resolve(UUID xMsRequestid, UUID xMsCorrelationid, String xMsMarketplaceToken);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> resolveAsync(UUID xMsRequestid, UUID xMsCorrelationid, String xMsMarketplaceToken, final ServiceCallback<Object> serviceCallback);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> resolveAsync(UUID xMsRequestid, UUID xMsCorrelationid, String xMsMarketplaceToken);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> resolveWithServiceResponseAsync(UUID xMsRequestid, UUID xMsCorrelationid, String xMsMarketplaceToken);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSubscription(UUID subscriptionId);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSubscriptionAsync(UUID subscriptionId, final ServiceCallback<Object> serviceCallback);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSubscriptionAsync(UUID subscriptionId);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getSubscriptionWithServiceResponseAsync(UUID subscriptionId);
    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSubscription(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSubscriptionAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Object> serviceCallback);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSubscriptionAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getSubscriptionWithServiceResponseAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    Error updateSubscription(Object body, UUID subscriptionId, String apiVersion);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Error> updateSubscriptionAsync(Object body, UUID subscriptionId, String apiVersion, final ServiceCallback<Error> serviceCallback);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<Error> updateSubscriptionAsync(Object body, UUID subscriptionId, String apiVersion);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<ServiceResponse<Error>> updateSubscriptionWithServiceResponseAsync(Object body, UUID subscriptionId, String apiVersion);
    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    Error updateSubscription(Object body, UUID subscriptionId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Error> updateSubscriptionAsync(Object body, UUID subscriptionId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Error> serviceCallback);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<Error> updateSubscriptionAsync(Object body, UUID subscriptionId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<ServiceResponse<Error>> updateSubscriptionWithServiceResponseAsync(Object body, UUID subscriptionId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    Error deleteSubscription(UUID subscriptionId, String apiVersion);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Error> deleteSubscriptionAsync(UUID subscriptionId, String apiVersion, final ServiceCallback<Error> serviceCallback);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<Error> deleteSubscriptionAsync(UUID subscriptionId, String apiVersion);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<ServiceResponse<Error>> deleteSubscriptionWithServiceResponseAsync(UUID subscriptionId, String apiVersion);
    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    Error deleteSubscription(UUID subscriptionId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Error> deleteSubscriptionAsync(UUID subscriptionId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Error> serviceCallback);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<Error> deleteSubscriptionAsync(UUID subscriptionId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<ServiceResponse<Error>> deleteSubscriptionWithServiceResponseAsync(UUID subscriptionId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object listSubscriptionPlans(UUID subscriptionId);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> listSubscriptionPlansAsync(UUID subscriptionId, final ServiceCallback<Object> serviceCallback);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> listSubscriptionPlansAsync(UUID subscriptionId);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> listSubscriptionPlansWithServiceResponseAsync(UUID subscriptionId);
    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object listSubscriptionPlans(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> listSubscriptionPlansAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Object> serviceCallback);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> listSubscriptionPlansAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> listSubscriptionPlansWithServiceResponseAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    Error activateSubscription(Object body, UUID subscriptionId);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Error> activateSubscriptionAsync(Object body, UUID subscriptionId, final ServiceCallback<Error> serviceCallback);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<Error> activateSubscriptionAsync(Object body, UUID subscriptionId);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<ServiceResponse<Error>> activateSubscriptionWithServiceResponseAsync(Object body, UUID subscriptionId);
    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    Error activateSubscription(Object body, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Error> activateSubscriptionAsync(Object body, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Error> serviceCallback);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<Error> activateSubscriptionAsync(Object body, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<ServiceResponse<Error>> activateSubscriptionWithServiceResponseAsync(Object body, UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSubscriptionOperations(UUID subscriptionId);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSubscriptionOperationsAsync(UUID subscriptionId, final ServiceCallback<Object> serviceCallback);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSubscriptionOperationsAsync(UUID subscriptionId);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getSubscriptionOperationsWithServiceResponseAsync(UUID subscriptionId);
    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSubscriptionOperations(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSubscriptionOperationsAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Object> serviceCallback);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSubscriptionOperationsAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getSubscriptionOperationsWithServiceResponseAsync(UUID subscriptionId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSubscriptionOperation(UUID subscriptionId, UUID operationId);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSubscriptionOperationAsync(UUID subscriptionId, UUID operationId, final ServiceCallback<Object> serviceCallback);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSubscriptionOperationAsync(UUID subscriptionId, UUID operationId);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getSubscriptionOperationWithServiceResponseAsync(UUID subscriptionId, UUID operationId);
    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSubscriptionOperation(UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSubscriptionOperationAsync(UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Object> serviceCallback);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSubscriptionOperationAsync(UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getSubscriptionOperationWithServiceResponseAsync(UUID subscriptionId, UUID operationId, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    Error updateOperation(Object body, UUID subscriptionId, UUID operationId, String apiVersion);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Error> updateOperationAsync(Object body, UUID subscriptionId, UUID operationId, String apiVersion, final ServiceCallback<Error> serviceCallback);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<Error> updateOperationAsync(Object body, UUID subscriptionId, UUID operationId, String apiVersion);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<ServiceResponse<Error>> updateOperationWithServiceResponseAsync(Object body, UUID subscriptionId, UUID operationId, String apiVersion);
    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    Error updateOperation(Object body, UUID subscriptionId, UUID operationId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Error> updateOperationAsync(Object body, UUID subscriptionId, UUID operationId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid, final ServiceCallback<Error> serviceCallback);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<Error> updateOperationAsync(Object body, UUID subscriptionId, UUID operationId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param body the Object value
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param apiVersion Version of the API. Possible values include: '2018-08-31', '2018-09-15'
     * @param xMsRequestid A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param xMsCorrelationid A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    Observable<ServiceResponse<Error>> updateOperationWithServiceResponseAsync(Object body, UUID subscriptionId, UUID operationId, String apiVersion, UUID xMsRequestid, UUID xMsCorrelationid);

}
